# Scripts used for analysisng scRNA-seq and snRNA-seq data from heart using R
# Data was first processed using 10x Genomics cellranger count command
# Plots and .rds files can be saved along the way using relevant scripts (not included in this workflow)
# Read README file to find sources of adapted scripts

# Load relevant packages 
library(dplyr)
library(Seurat)
library(patchwork)
library(ggplot2)
 
# Read data (10x Genomics cellranger output)
Sample1.data <- Read10x(data.dir = "../Sample1/outs/filtered_feature_bc_matrix/")

# Check quality control (QC) metrics of data 
Sample1 <- CreateSeuratObject(counts = Sample1.data, project = "Sample1Analysis", min.cells = 3, min.features = 200)
Sample1[["percent.mt"]] <- PercentageFeatureSet(Sample1, pattern = "^MT-") 

# Visualise QC metrics
VlnPlot(Sample1, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3) # Violin plot
nCount_RNA_vs_percent.mt_plot <- FeatureScatter(Sample1, feature1 = "nCount_RNA", feature2 = "percent.mt") # Scatter plot (counts vs mt percent)
nCount_RNA_vs_nFeature_RNA_plot <- FeatureScatter(Sample1, feature1 = "nCount_RNA", feature2 = "nFeature_RNA") # Scatter plot (counts vs gene feature)

# Data normalisation using NormalizeData
Sample1 <- NormalizeData(Sample1) 
## Alternatively data can be normalised using SCTransform

# Identify highly variable genes
Sample1 <- FindVariableFeatures(Sample1, selection.method = "vst", nfeatures = 2000)
top10 <- head(VariableFeatures(Sample1), 10)

# Visualise variable gene feature data 
VariableFeatures_plot <- VariableFeaturePlot(Sample1)
VariableFeaturesLabelled_plot <- LabelPoints(plot = VariableFeatures_plot, points = top10, repel = TRUE)

# Scale data
all.genes <- rownames(Sample1)
Sample1 <- ScaleData(Sample1, features = all.genes)

# Dimensionality reduction and PCA
Sample1 <- RunPCA(Sample1, features = VariableFeatures(object = Sample1))

# Assess dimensions  
VizDimLoadings(Sample1, dims = 1:2, reduction = "pca")
DimPlot_plot(Sample1, reduction = "pca")
DimHeatmap_plot(Sample1, dims = 1, cells = 74, balanced = TRUE)
DimHeatmap_plot(Sample1, dims = 1:15, cells = 74, balanced = TRUE)
Sample1 <- JackStraw(Sample1, num.replicate = 100)
Sample1 <- ScoreJackStraw(Sample1, dims = 1:20)
JackStrawPlot_plot(Sample1, dims = 1:15)
ElbowPlot_plot(Sample1)

# Visualise clusters  
Sample1 <- FindNeighbors(Sample1, dims = 1:20)
Sample1 <- FindClusters(Sample1, resolution = 0.5)
head(Idents(Sample1), 5)
Sample1 <- RunUMAP(Sample1, dims = 1:10)
DimPlot(Sample1, reduction = "umap")

################ Sample integration ##################
# Uses FindIntegrationAnchors command 
# Read in multiple files to be combined 
Sample1 <- readRDS(“R:/File/Path/To/RDS/Sample1_Analysis.rds”)
Sample2 <- readRDS(“R:/File/Path/To/RDS/Sample2_Analysis.rds”)  
Sample3 <- readRDS(“R:/File/Path/To/RDS/Sample3_Analysis.rds”)  
Sample4 <- readRDS(“R:/File/Path/To/RDS/Sample4_Analysis.rds”) 

# If there are issues with loading multiple samples into R, use DietSeurat and ScaleData after each sample is loaded as shown below 
Sample1=DietSeurat(Sample1)
Sample1=ScaleData(Sample1)
Sample2=DietSeurat(Sample2)
Sample2=ScaleData(Sample2)
Sample3=DietSeurat(Sample3)
Sample3=ScaleData(Sample3)
Sample4=DietSeurat(Sample4)
Sample4=ScaleData(Sample4)

# Assign samples to individual groups 
Sample1$group1='001'
Sample2$group1='002'
Sample3$group1='003'
Sample4$group1='004'

# Assign samples to two groups 
Sample1$group2='Combined1'
Sample2$group2='Combined1'
Sample3$group2='Combined2'
Sample4$group2='Combined2'

# Combine samples together
anchors <- FindIntegrationAnchors(object.list = list(Sample1,Sample2,Sample3,Sample4), dims = 1:20)
combined_samples <- IntegrateData(anchorset = anchors, dims = 1:20)
DefaultAssay(combined_samples) <- "integrated"

# Re-run dimensionality reduction and clustering on integrated file 
combined_samples <- ScaleData(combined_samples, verbose = FALSE)
combined_samples <- RunPCA(combined_samples, npcs = 30, verbose = FALSE)
combined_samples <- RunUMAP(combined_samples, reduction = "pca", dims = 1:20)
combined_samples <- FindNeighbors(combined_samples, reduction = "pca", dims = 1:20)
combined_samples <- FindClusters(combined_samples, resolution = 0.5)
DimPlot(combined_samples, reduction = "umap", split.by = "group1") # Visualise PCA based on group allocation (group 1) 
DimPlot(combined_samples, reduction = "umap", split.by = "group2") # Visualise PCA based on group allocation (group 2) 

# Tests for differential expression
# Continue for however many clusters there are in dataset 
cluster0.markers <- FindMarkers(combined, ident.1 = 0, logfc.threshold = 0.25, test.use = "roc", only.pos = TRUE)
cluster1.markers <- FindMarkers(combined, ident.1 = 1, logfc.threshold = 0.25, test.use = "roc", only.pos = TRUE)
cluster2.markers <- FindMarkers(combined, ident.1 = 2, logfc.threshold = 0.25, test.use = "roc", only.pos = TRUE)
cluster3.markers <- FindMarkers(combined, ident.1 = 3, logfc.threshold = 0.25, test.use = "roc", only.pos = TRUE)
cluster4.markers <- FindMarkers(combined, ident.1 = 4, logfc.threshold = 0.25, test.use = "roc", only.pos = TRUE)
cluster5.markers <- FindMarkers(combined, ident.1 = 5, logfc.threshold = 0.25, test.use = "roc", only.pos = TRUE)
cluster6.markers <- FindMarkers(combined, ident.1 = 6, logfc.threshold = 0.25, test.use = "roc", only.pos = TRUE)
cluster7.markers <- FindMarkers(combined, ident.1 = 7, logfc.threshold = 0.25, test.use = "roc", only.pos = TRUE)
cluster8.markers <- FindMarkers(combined, ident.1 = 8, logfc.threshold = 0.25, test.use = "roc", only.pos = TRUE)
cluster9.markers <- FindMarkers(combined, ident.1 = 9, logfc.threshold = 0.25, test.use = "roc", only.pos = TRUE)
cluster10.markers <- FindMarkers(combined, ident.1 = 10, logfc.threshold = 0.25, test.use = "roc", only.pos = TRUE)

# Create feature plots of gene expression 
## Murine cardiac cell type markers 
FeaturePlot(combined_samples, features = c("Tnnt2", "Ryr2", "Ttn")) # Cardiomyocyte markers 
FeaturePlot(combined_samples, features = c ("Pdgfra", "Vcan", "Mmp2")) # Fibroblast markers
FeaturePlot(combined_samples, features = c ("Pecam1", "Vwf", "Tie1")) # Endothelial cell markers
FeaturePlot(combined, features = c("Tagln", "Myh11", "Acta2")) # Smooth muscle cell markers
FeaturePlot(combined_samples, features = c("Ptprc")) # Lymphocyte
FeaturePlot(combined, features = c("Cd79a", "Cd79b", "Ly6d")) # B cell markers
FeaturePlot(combined, features = c("Cd3g", "Lat", "Skap1")) # B cell markers
## Human cardiac cell type markers 
FeaturePlot(combined, features = c("TNNT2", "RYR2", "TTN")) # cardiomyocytes
FeaturePlot(combined, features = c("PDGFRA", "VCAN", "MMP2")) # fibroblasts
FeaturePlot(combined, features = c("PECAM1", "VWF", "TIE1")) # endothelial cells
FeaturePlot(combined, features = c("CD3G", "LAT", "SKAP1")) # T cells
FeaturePlot(combined, features = c("CD79B", "LY6D", "CD79A")) # B cells
FeaturePlot(combined, features = c("PTPRC")) # Lymphocytes
FeaturePlot(combined, features = c("TAGLN", "MYH11", "ACTA2")) # SMCs
FeaturePlot(combined, features = c("CDKN1A", "CDKN2A", "TP53")) # senescent cells
## Human peripheral blood leucocyte markers
FeaturePlot(combined_samples, features = c("CD3E", "LCK", "TRAC")) # T cell markers 
FeaturePlot(combined_samples, features = c("IL7R", "CD4")) # CD4+ T cell markers 
FeaturePlot(combined_samples, features = c("CD8A", "CD8B", "CCL5")) # CD8+ T cell markers 
FeaturePlot(combined_samples, features = c("CD8na", "CCR7")) # Non-activated CD8+ T cell markers 
FeaturePlot(combined_samples, features = c("FOXP3", "CTLA4")) # Regulatory T cell markers  
FeaturePlot(combined_samples, features = c("TRDC")) # γδ T cell markers
FeaturePlot(combined_samples, features = c("FCGR3A", "CD14")) # Monocyte markers  
FeaturePlot(combined_samples, features = c("GNLY", "NKG7", "NCR1")) # NK cell markers
FeaturePlot(combined_samples, features = c("CD74", "CD79A", “IGH”) # B cell markers 
FeaturePlot(combined_samples, features = c("CD27", "IGHM") # Naïve B cell markers 
FeaturePlot(combined_samples, features = c("IGHG", "CD38", “TNFRSF17”) # Plasmablasts 
FeaturePlot(combined_samples, features = c("WDFY4", "XCR1", “BATF3”) # Myeloid dendritic cells 1
FeaturePlot(combined_samples, features = c("FCER1A”, "CD1C", “CLEC10A”) # Myeloid dendritic cells 2
FeaturePlot(combined_samples, features = c("S100A8", "S100A9") # Granulocyte markers 
FeaturePlot(combined_samples, features = c("CD14”)) # CD14+ Monocytes 
FeaturePlot(combined_samples, features = c("TCF4”, "TNFRSF21”) # Plasmacytoid dendritic cells
FeaturePlot(combined_samples, features = c("GNG11", "CLU")) # megakaryocytes

# Create dot plot of gene expression markers 
## Murine cardiac cell types
DotPlot(combined, features = c('Ttn','Tnnt2','Vcan','Pdgfra','Pecam1',‘Vwf’, ‘Ptprc’, ‘Cd3g’, ‘Tagln’, ‘Acta2’, ‘Sell’, ‘Myh11’), cols = c(“darkblue”, “firebrick”), dot.scale = 8) + RotatedAxis() 
## Human cardiac cell types
DotPlot(combined, features = c('TNNT2',’RYR2’,'TTN','PDGFRA','VCAN','PECAM1',‘VWF’,’TIE1’, ‘TAGLN’, ‘ACTA2’,‘MYH11’,‘PTPRC’), cols = c(“darkblue”, “firebrick”), dot.scale = 8) + RotatedAxis() 
## Human circulating leucocytes 
DotPlot(combined, features = c('CD3E','TRAC','IL7R','CD8B','CCR7','FOXP3','TRDC','GNLY','FCGR3A’, ‘SELL’, ‘CD79A’. ‘IGHD’, ‘CD27’, ‘CD36’, ‘LYZ’, ‘WDFY4’, ‘FCER1A’, ‘S100A8’, ‘CD14’, ‘TCF4’, ‘GNG11’), cols = c("blue", "red"), dot.scale = 8) + RotatedAxis() 

# Create volcano plot of variable genes between allocated groups
fcdata <- FindMarkers(combined, ident.1 = "Combined1", ident.2 = "Combined2", verbose = FALSE, group.by = 'group2')
EnhancedVolcano: :EnhancedVolcano(fcdata, lab=rownames(fcdata, x=’avg_log2FC’,y= ‘p_val_adj’, subtitle='',
legendLabSize=1, legendIconSize=0.5, titleLabSize= 10, title='Combined1 vs Combined2,
legendPosition='below',pCutoff=0.05,FCcutoff = 0.25,col=c("grey30","cornsilk4", "royalblue", "red2"))

################ Processing multiplexed snRNA-seq data ##################
# Pipelines used from cellranger multi and CITE-seq
## cellranger multi 
cd /filepath/to/output/file/directory
export PATH=/$PWD/cellranger-6.1.1:$PATH
cellranger multi --id=sampleID_mux \
--csv=multi-config.csv \
--localmem=128 \
--localcores=8

reference,/filepath/to/reference/refdata-gex-GRCh38-2020-A/
cmo-set,/file/path/to/cmo/file/cmoset1.csv
expect-cells,10000
include-introns,true

# Find FASTQ library locations
Sample001a-AK3737_HK53LDSX2,/file/path/to/fastq/directory/,Multiplexing Capture
Sample001a-AK3737_HLTGWDSX2,/file/path/to/fastq/directory/,Multiplexing Capture
Sample001b-AK3738_HK53LDSX2,/file/path/to/fastq/directory/,Multiplexing Capture
Sample001b-AK3738_HLTGWDSX2,/file/path/to/fastq/directory/,Multiplexing Capture
Sample001c-AK3739_HK53LDSX2,/file/path/to/fastq/directory/,Gene Expression
Sample001c-AK3739_HLTGWDSX2,/file/path/to/fastq/directory/,Gene Expression
Sample001d-AK3740_HK53LDSX2,/file/path/to/fastq/directory/,Gene Expression
Sample001d-AK3740_HLTGWDSX2,/ file/path/to/fastq/directory/,Gene Expression

# Input patient sample IDs
sample_id,cmo_ids
PtSample001,TotalSeq_A0451_anti_nuclearporecomplexproteinshashtag4
PtSample002,TotalSeq_A0451_anti_nuclearporecomplexproteinshashtag5
PtSample003,TotalSeq_A0451_anti_nuclearporecomplexproteinshashtag6

# Input unique barcode for multiplexing
id,name,read,pattern,sequence,feature_type
TotalSeq_A0451_anti_nuclearporecomplexproteinshashtag4,\
PtSample001,R2,5P(BC),TGGTGTCATTCTTGA,Multiplexing Capture
TotalSeq_A0451_anti_nuclearporecomplexproteinshashtag5, \
PtSample002,R2,5P(BC),ATGATGAACAGCCAG,Multiplexing Capture
TotalSeq_A0451_anti_nuclearporecomplexproteinshashtag6, \
PtSample003,R2,5P(BC),CTCGAACGCTTATCG,Multiplexing Capture

## CITE-seq
CITE-seq-Count --threads 12 -R1 cat001_R1.fastq.gz -R2 cat001_R2.fastq.gz -t antibtags.csv -wl 3M-february-2018.txt -cbf 1 -cbl 16 -umif 17 -umil 28 --sliding-window -cells 10000 -o filename 

################ snATAC-seq data ##################


# Load relevant packages  
library(Signac)
library(Seurat)
library(GenomeInfoDb)
library(EnsDb.Mmusculus.v79)
library(patchwork)
library(ggplot2)
set.seed(1234)


# Pre-processing workflow
## Read data
counts <- Read10X_h5(filename = "filtered_peak_bc_matrix.h5")
metadata <- read.csv(
  file = "singlecell.csv",
  header = TRUE,
  row.names = 1
)  

chrom_assay <- CreateChromatinAssay(
  counts = countsA005,
  sep = c(":", "-"),
  genome = 'mm10',
  fragments = 'fragments.tsv.gz',
  min.cells = 1,
  min.features = 200
)

Sample1 <- CreateSeuratObject(
  counts = chrom_assay,
  assay = "peaks",
  meta.data = metadata
)

Sample1
Sample1[['peaks']]
granges(Sample1)

# Extract gene annotations from EnsDb
annotations <- GetGRangesFromEnsDb(ensdb = EnsDb.Mmusculus.v79)
seqlevelsStyle(annotations) <- 'UCSC' # Change to UCSC style

# Add the gene information to the object 
genome(annotations) <- "mm10"
Annotation(Sample1) <- annotations


# Computing QC metrics
Sample1 <- NucleosomeSignal(object = Sample1) # Compute nucleosome signal score per cell
Sample1 <- TSSEnrichment(object = Sample1, fast = FALSE) # Compute TSS enrichment score per cell

# Add blacklist ratio and fraction of reads in peaks 
Sample1$pct_reads_in_peaks <- Sample1$peak_region_fragments / Sample1$passed_filters * 100
Sample1$blacklist_ratio <- Sample1$blacklist_region_fragments / Sample1$peak_region_fragments
Sample1$high.tss <- ifelse(Sample1$TSS.enrichment > 2, 'High', 'Low')
TSSPlot(Sample1, group.by = 'high.tss') + NoLegend() # Visualise TSS enrichment scores 
Sample1$nucleosome_group <- ifelse(Sample1$nucleosome_signal > 4, 'NS > 4', 'NS < 4')
FragmentHistogram(object = Sample1, group.by = 'nucleosome_group') # Visualise nucleosomal strength score

# Visualise QC metrics
VlnPlot(
  object = Sample1,
  features = c('pct_reads_in_peaks', 'peak_region_fragments',
               'TSS.enrichment', 'blacklist_ratio', 'nucleosome_signal'),
  pt.size = 0.1,
  ncol = 5
)

# Remove outliers according to QC metrics
Sample1 <- subset(
  x = Sample1,
  subset = peak_region_fragments > 500 &
    peak_region_fragments < 20000 &
    pct_reads_in_peaks > 15 &
    blacklist_ratio < 0.05 &
    nucleosome_signal < 4 &
    TSS.enrichment > 2
)

# Normalisation and linear dimensional reduction 
Sample1 <- RunTFIDF(Sample1)
Sample1 <- FindTopFeatures(Sample1, min.cutoff = 'q0')
Sample1 <- RunSVD(Sample1)
DepthCor(Sample1)

# Non-linear dimension reduction and clustering 
Sample1 <- RunUMAP(object = Sample1, reduction = 'lsi', dims = 2:30)
Sample1 <- FindNeighbors(object = Sample1, reduction = 'lsi', dims = 2:30)
Sample1 <- FindClusters(object = Sample1, verbose = FALSE, algorithm = 3)
DimPlot(object = Sample1, label = TRUE) + NoLegend() # Visualise UMAP plot
# Creating a gene activity matrix
Sample1[[‘RNA’]]<- CreateAssayObject(counts = gene.activites)
Sample1 <- NormalizeData(
 	object = Sample1,
	assay = ‘RNA’,
	normalisation.method = ‘LogNormalize’
	scale.factor = median(Sample1$nCount_RNA)
DefaultAssay(Sample1) <- ‘RNA’
FeaturePlot(
object = Sample1,
features = c(‘Insert’, ‘List’, ‘Here’),
pt.size = 0.1,
max.cutoff = ‘q95’
ncol=3
)

